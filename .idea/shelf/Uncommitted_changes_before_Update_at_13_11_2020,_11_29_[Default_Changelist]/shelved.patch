Index: src/components.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* eslint-disable */\n/* tslint:disable */\n/**\n * This is an autogenerated file created by the Stencil compiler.\n * It contains typing information for all components that exist in this project.\n */\nimport { HTMLStencilElement, JSXBase } from \"@stencil/core/internal\";\nimport { RESULT_STATUS } from \"./utils/utils\";\nexport namespace Components {\n    interface GatacaQr {\n        \"buttonText\"?: string;\n        /**\n          * ***Mandatory*** Connect Server where the wallet will send the data\n         */\n        \"callbackServer\": string;\n        /**\n          * _[Optional]_ Check status function to query the current status of the session If not set, it would fallback to the session Endpoint property.\n         */\n        \"checkStatus\"?: (id ?: string) => Promise<RESULT_STATUS>;\n        /**\n          * _[Optional]_ Create session function to generate a new Session If the property is unset, it will fallback to the generation Endpoint property.\n         */\n        \"createSession\"?: () => Promise<string>;\n        /**\n          * Force manually the display of a QR\n         */\n        \"display\": () => Promise<void>;\n        /**\n          * _[Optional]_ Display a link containing a dynamic link to invoke the wallet if closed\n         */\n        \"dynamicLink\"?: boolean;\n        /**\n          * ***Mandatory*** Callback fired upon session expired or invalid If not set, session error would not be handled An error containing information will be passed as parameter\n         */\n        \"errorCallback\": (error ?: Error) => void;\n        /**\n          * _[Optional]_ Session Generation URL to create a new Session. It will expect to receive the session Id from the response header 'X-Connect-Id'. If not set, it would use a default endpoint to the same window URL under the path /auth\n         */\n        \"generationEndpoint\"?: string;\n        /**\n          * Retrieve manually the session data on a successful login\n         */\n        \"getSessionData\": () => Promise<any>;\n        /**\n          * Retrieve manually a possible token retrieved upon login on the Header 'token'\n         */\n        \"getToken\": () => Promise<string>;\n        /**\n          * _[Optional]_ Frequency in seconds to check if the session has been validated\n         */\n        \"pollingFrequency\"?: number;\n        \"qrDescription\"?: string;\n        \"qrTitle\"?: string;\n        /**\n          * _[Optional]_ EndpointURL to fetch data for the status. The endpoint URL will send a GET request with the session id on a parameter; concatenated to this string. It can be used if your API fulfills the requirement. If not, use the checkStatus property. If not set, it would use a default endpoint to the same window URL under the path /auth\n         */\n        \"sessionEndpoint\"?: string;\n        /**\n          * _[Optional]_ Generated session Id, which is required. Without session Id, the QR will not work. If the property is unset, it will check for an _id_ or _sessionId_ query parameter on the current URL. If there is no sessionId, it will fallback to the createSession method to generate a new Session.\n         */\n        \"sessionId\"?: string;\n        /**\n          * _[Optional]_ Maximum time window to display the session\n         */\n        \"sessionTimeout\"?: number;\n        /**\n          * Stop manually an ongoing session\n         */\n        \"stop\": () => Promise<void>;\n        /**\n          * ***Mandatory*** Callback fired upon session correctly verified If not set, session validation wouldn't trigger any action The session data and a possible token will be sent as parameters to the callback\n         */\n        \"successCallback\": (data ?: any, token ?: string) => void;\n    }\n}\ndeclare global {\n    interface HTMLGatacaQrElement extends Components.GatacaQr, HTMLStencilElement {\n    }\n    var HTMLGatacaQrElement: {\n        prototype: HTMLGatacaQrElement;\n        new (): HTMLGatacaQrElement;\n    };\n    interface HTMLElementTagNameMap {\n        \"gataca-qr\": HTMLGatacaQrElement;\n    }\n}\ndeclare namespace LocalJSX {\n    interface GatacaQr {\n        \"buttonText\"?: string;\n        /**\n          * ***Mandatory*** Connect Server where the wallet will send the data\n         */\n        \"callbackServer\"?: string;\n        /**\n          * _[Optional]_ Check status function to query the current status of the session If not set, it would fallback to the session Endpoint property.\n         */\n        \"checkStatus\"?: (id ?: string) => Promise<RESULT_STATUS>;\n        /**\n          * _[Optional]_ Create session function to generate a new Session If the property is unset, it will fallback to the generation Endpoint property.\n         */\n        \"createSession\"?: () => Promise<string>;\n        /**\n          * _[Optional]_ Display a link containing a dynamic link to invoke the wallet if closed\n         */\n        \"dynamicLink\"?: boolean;\n        /**\n          * ***Mandatory*** Callback fired upon session expired or invalid If not set, session error would not be handled An error containing information will be passed as parameter\n         */\n        \"errorCallback\"?: (error ?: Error) => void;\n        /**\n          * _[Optional]_ Session Generation URL to create a new Session. It will expect to receive the session Id from the response header 'X-Connect-Id'. If not set, it would use a default endpoint to the same window URL under the path /auth\n         */\n        \"generationEndpoint\"?: string;\n        /**\n          * GatacaLoginCompleted event, triggered with session data upon login success\n         */\n        \"onGatacaLoginCompleted\"?: (event: CustomEvent<any>) => void;\n        /**\n          * GatacaLoginFailed event, triggered with error upon login failure\n         */\n        \"onGatacaLoginFailed\"?: (event: CustomEvent<any>) => void;\n        /**\n          * _[Optional]_ Frequency in seconds to check if the session has been validated\n         */\n        \"pollingFrequency\"?: number;\n        \"qrDescription\"?: string;\n        \"qrTitle\"?: string;\n        /**\n          * _[Optional]_ EndpointURL to fetch data for the status. The endpoint URL will send a GET request with the session id on a parameter; concatenated to this string. It can be used if your API fulfills the requirement. If not, use the checkStatus property. If not set, it would use a default endpoint to the same window URL under the path /auth\n         */\n        \"sessionEndpoint\"?: string;\n        /**\n          * _[Optional]_ Generated session Id, which is required. Without session Id, the QR will not work. If the property is unset, it will check for an _id_ or _sessionId_ query parameter on the current URL. If there is no sessionId, it will fallback to the createSession method to generate a new Session.\n         */\n        \"sessionId\"?: string;\n        /**\n          * _[Optional]_ Maximum time window to display the session\n         */\n        \"sessionTimeout\"?: number;\n        /**\n          * ***Mandatory*** Callback fired upon session correctly verified If not set, session validation wouldn't trigger any action The session data and a possible token will be sent as parameters to the callback\n         */\n        \"successCallback\"?: (data ?: any, token ?: string) => void;\n    }\n    interface IntrinsicElements {\n        \"gataca-qr\": GatacaQr;\n    }\n}\nexport { LocalJSX as JSX };\ndeclare module \"@stencil/core\" {\n    export namespace JSX {\n        interface IntrinsicElements {\n            \"gataca-qr\": LocalJSX.GatacaQr & JSXBase.HTMLAttributes<HTMLGatacaQrElement>;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components.d.ts	(revision 61d0e4f1a570421d0570fb07de0ff730fdb9ce9a)
+++ src/components.d.ts	(date 1605263196794)
@@ -49,8 +49,8 @@
           * _[Optional]_ Frequency in seconds to check if the session has been validated
          */
         "pollingFrequency"?: number;
-        "qrDescription"?: string;
-        "qrTitle"?: string;
+        "qrModalDescription"?: string;
+        "qrModalTitle"?: string;
         /**
           * _[Optional]_ EndpointURL to fetch data for the status. The endpoint URL will send a GET request with the session id on a parameter; concatenated to this string. It can be used if your API fulfills the requirement. If not, use the checkStatus property. If not set, it would use a default endpoint to the same window URL under the path /auth
          */
@@ -123,8 +123,8 @@
           * _[Optional]_ Frequency in seconds to check if the session has been validated
          */
         "pollingFrequency"?: number;
-        "qrDescription"?: string;
-        "qrTitle"?: string;
+        "qrModalDescription"?: string;
+        "qrModalTitle"?: string;
         /**
           * _[Optional]_ EndpointURL to fetch data for the status. The endpoint URL will send a GET request with the session id on a parameter; concatenated to this string. It can be used if your API fulfills the requirement. If not, use the checkStatus property. If not set, it would use a default endpoint to the same window URL under the path /auth
          */
